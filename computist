#!/usr/bin/env python3

'''
Copyright (c) 2012-2021 Tim Tomes
Modifications Copyright (c) 2021 Jan William Johnsen
2021-02-23: Updated program name and variable names in all related files.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''

import argparse
import re
import sys
import platform
from internals.core import base
from internals.core.framework import Colors

# prevent creation of compiled bytecode files
sys.dont_write_bytecode = True


def computist_ui(args):
    # set up command completion
    try:
        import readline
    except ImportError:
        print(f'{Colors.R}[!] Module \'readline\' not available. Tab complete '
              f'disabled.{Colors.N}')
    else:
        import rlcompleter
        if platform.system() == 'Darwin':  # 'libedit' in readline.__doc__:
            readline.parse_and_bind('bind ^I rl_complete')
        else:
            readline.parse_and_bind('tab: complete')
        readline.set_completer_delims(re.sub('[/-]', '',
                                      readline.get_completer_delims()))
        # for possible future use to format command completion output
        # readline.set_completion_display_matches_hook(display_hook)
    # instantiate framework
    x = base.Computist()
    # check for and run script session
    if args.script_file:
        x._do_script_execute(args.script_file)
    # launch the interactive session
    options = [base.Mode.CON]
    if args.workspace:
        options.append(args.workspace)
    try:
        x.start(*options)
    except KeyboardInterrupt:
        print('')


if __name__ == '__main__':
    description = f"%(prog)s - {base.__author__}"
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('-w', help='load/create a workspace',
                        metavar='workspace', dest='workspace', action='store')
    parser.add_argument('-r', help='load commands from a resource file',
                        metavar='filename', dest='script_file', action='store')
    parser.add_argument('--version', help='displays the current version',
                        action='version', version=base.__version__)
    args = parser.parse_args()
    computist_ui(args)
